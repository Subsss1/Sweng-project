ismachine_protocol = Proto("ismachine", "IsMachine Protocol")
ismachine_protocol.fields = {}
ismachine_protocol.fields.generated_by = ProtoField.string("ismachine.generated_by", "Generated by")
ismachine_protocol.fields.probability = ProtoField.string("ismachine.probability", "Probability")

cached_result = {}

function ismachine_protocol.dissector(buffer, pinfo, tree)
  -- Filter out
  local packet_type = buffer(12, 2):uint()
  local proto_num = buffer(23, 1):uint()
  local is_ip = packet_type == 2048 or packet_type == 34525
  local is_udp_or_tcp = proto_num == 6 or proto_num == 17

  if(not is_ip and not is_udp_or_tcp) then
    return
  end

  -- Get packet info
  local ipv = tostring(packet_type == 2048 and 4 or 6)
  local src = tostring(pinfo.src)
  local dst = tostring(pinfo.dst)
  local src_port = tostring(pinfo.src_port)
  local dst_port = tostring(pinfo.dst_port)
  local proto = tostring(proto_num)
  local len = tostring(pinfo.len)

  local args = { ipv, src, dst, src_port, dst_port, proto, len }
  print(dump(args))

  -- Get inference result
  local result = cached_result[pinfo.number]

  if not result then
    result = infer(args)
    cached_result[pinfo.number] = result
  end

  -- Format fields
  local machine_generated_probability = tonumber(result)
  local generated_by = machine_generated_probability >= 0.5 and "Machine" or "Human"
  local probability = machine_generated_probability >= 0.5 and machine_generated_probability or 1 - machine_generated_probability

  -- Add subtree
  local subtree = tree:add(ismachine_protocol, buffer(), "IsMachine Protocol Data")
  subtree:add(ismachine_protocol.fields.generated_by, generated_by)
  subtree:add(ismachine_protocol.fields.probability, probability)
end

register_postdissector(ismachine_protocol)

-- Requires LuaSocket for HTTP functionality
local http = require("socket.http")
local ltn12 = require("ltn12")

-- Helpers
function infer(args)
  local url = "http://localhost:5000/inference"
  local request_body = table.concat(args, " ")
  local response_body = {}

  -- Sending a POST request to the Python inference service
  local res, code, response_headers = http.request{
    url = url,
    method = "POST",
    headers = {
      ["Content-Type"] = "application/x-www-form-urlencoded",
      ["Content-Length"] = tostring(#request_body)
    },
    source = ltn12.source.string(request_body),
    sink = ltn12.sink.table(response_body)
  }

  if code == 200 then
    -- Assuming the service returns the inference result as a plain text response
    return table.concat(response_body)
  else
    error("HTTP request failed: " .. tostring(code))
  end
end


function remove_last_line(str)
  local last_line_index = str:find("\n[^\n]*$")
  if last_line_index then
    return str:sub(1, last_line_index - 1)
  else
    return ""
  end
end

function dump(o)
  if type(o) == 'table' then
     local s = '{ '
     for k,v in pairs(o) do
        if type(k) ~= 'number' then k = '"'..k..'"' end
        s = s .. '['..k..'] = ' .. dump(v) .. ','
     end
     return s .. '} '
  else
     return tostring(o)
  end
end
